#pragma once
#include "Header.h"

class Timer
{
private:
	int _nPosX;
	int _nPosY;
	int _nWidth;
	int _nHeight;

	clock_t _tRunStart, _tRunCur;
	clock_t _tCycleInit, _tCycleCur;

	char _timerDot[7 * 33] =
	{
		15,15,15,15,15,15,-1,15,15,15,15,-1,15,15,-1,-1,-1,15,15,-1,15,15,15,15,15,15,-1,-1,-1,-1,-1,-1,-1,
		-1,-1,15,15,-1,-1,-1,-1,15,15,-1,-1,15,15,15,-1,15,15,15,-1,15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
		-1,-1,15,15,-1,-1,-1,-1,15,15,-1,-1,15,15,15,15,15,15,15,-1,15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
		-1,-1,15,15,-1,-1,-1,-1,15,15,-1,-1,15,-1,15,15,15,-1,15,-1,15,15,15,15,15,-1,-1,15,15,15,15,15,15,
		-1,-1,15,15,-1,-1,-1,-1,15,15,-1,-1,15,-1,-1,15,-1,-1,15,-1,15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
		-1,-1,15,15,-1,-1,-1,-1,15,15,-1,-1,15,-1,-1,-1,-1,-1,15,-1,15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
		-1,-1,15,15,-1,-1,-1,15,15,15,15,-1,15,-1,-1,-1,-1,-1,15,-1,15,15,15,15,15,15,-1,-1,-1,-1,-1,-1,-1
	};

	char _timeOverDot[9 * 69] =
	{
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,15,15,15,15,15,15,0,15,15,15,15,0,15,15,0,0,0,15,15,0,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,0,0,15,0,0,0,0,0,15,0,15,15,15,15,15,15,0,15,15,15,15,15,0,0,
		0,0,0,15,15,0,0,0,0,15,15,0,0,15,15,15,0,15,15,15,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,15,15,0,0,0,15,15,0,15,0,0,0,0,0,0,15,0,0,0,0,15,0,
		0,0,0,15,15,0,0,0,0,15,15,0,0,15,15,15,15,15,15,15,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,15,15,0,0,0,15,15,0,15,0,0,0,0,0,0,15,0,0,0,0,15,0,
		0,0,0,15,15,0,0,0,0,15,15,0,0,15,0,15,15,15,0,15,0,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,15,15,0,15,15,0,0,15,15,15,15,15,0,0,15,15,15,15,15,0,0,
		0,0,0,15,15,0,0,0,0,15,15,0,0,15,0,0,15,0,0,15,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,15,0,15,0,0,0,15,0,0,0,0,0,0,15,0,0,15,0,0,0,
		0,0,0,15,15,0,0,0,0,15,15,0,0,15,0,0,0,0,0,15,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,15,15,15,0,0,0,15,0,0,0,0,0,0,15,0,0,0,15,0,0,
		0,0,0,15,15,0,0,0,15,15,15,15,0,15,0,0,0,0,0,15,0,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,0,0,0,0,0,15,0,0,0,0,15,15,15,15,15,15,0,15,0,0,0,0,15,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	};
	char _timeNumDot[10][7 * 6]
	{
		{
			-1,15,15,15,15,-1,
			15,-1,-1,-1,-1,15,
			15,-1,-1,-1,-1,15,
			15,-1,-1,-1,-1,15,
			15,-1,-1,-1,-1,15,
			15,-1,-1,-1,-1,15,
			-1,15,15,15,15,-1
		},
		{
			-1,-1,-1,15,-1,-1,
			-1,-1,15,15,-1,-1,
			-1,-1,-1,15,-1,-1,
			-1,-1,-1,15,-1,-1,
			-1,-1,-1,15,-1,-1,
			-1,-1,-1,15,-1,-1,
			-1,-1,15,15,15,-1
		},
		{
			15,15,15,15,15,15,
			-1,-1,-1,-1,-1,15,
			-1,-1,-1,-1,-1,15,
			15,15,15,15,15,15,
			15,-1,-1,-1,-1,-1,
			15,-1,-1,-1,-1,-1,
			15,15,15,15,15,15
		},
		{
			15,15,15,15,15,15,
			-1,-1,-1,-1,-1,15,
			-1,-1,-1,-1,-1,15,
			15,15,15,15,15,15,
			-1,-1,-1,-1,-1,15,
			-1,-1,-1,-1,-1,15,
			15,15,15,15,15,15
		},
		{
			15,-1,-1,-1,-1,15,
			15,-1,-1,-1,-1,15,
			15,-1,-1,-1,-1,15,
			15,15,15,15,15,15,
			-1,-1,-1,-1,-1,15,
			-1,-1,-1,-1,-1,15,
			-1,-1,-1,-1,-1,15
		},
		{
			15,15,15,15,15,15,
			15,-1,-1,-1,-1,-1,
			15,-1,-1,-1,-1,-1,
			15,15,15,15,15,15,
			-1,-1,-1,-1,-1,15,
			-1,-1,-1,-1,-1,15,
			15,15,15,15,15,15
		},
		{
			15,-1,-1,-1,-1,-1,
			15,-1,-1,-1,-1,-1,
			15,-1,-1,-1,-1,-1,
			15,15,15,15,15,15,
			15,-1,-1,-1,-1,15,
			15,-1,-1,-1,-1,15,
			15,15,15,15,15,15
		},
		{
			15,15,15,15,15,15,
			-1,-1,-1,-1,-1,15,
			-1,-1,-1,-1,-1,15,
			-1,-1,-1,-1,-1,15,
			-1,-1,-1,-1,-1,15,
			-1,-1,-1,-1,-1,15,
			-1,-1,-1,-1,-1,15
		},
		{
			15,15,15,15,15,15,
			15,-1,-1,-1,-1,15,
			15,-1,-1,-1,-1,15,
			15,15,15,15,15,15,
			15,-1,-1,-1,-1,15,
			15,-1,-1,-1,-1,15,
			15,15,15,15,15,15
		},
		{
			15,15,15,15,15,15,
			15,-1,-1,-1,-1,15,
			15,-1,-1,-1,-1,15,
			15,15,15,15,15,15,
			-1,-1,-1,-1,-1,15,
			-1,-1,-1,-1,-1,15,
			15,15,15,15,15,15
		}
	};

public:
	Timer();
	~Timer();

	clock_t getRunCur() { return (_tRunStart - clock()) / CLOCKS_PER_SEC; }
	void setRunCur(clock_t runCur) { _tRunCur = runCur; }

	clock_t getRunStart() { return _tRunStart; }
	void setRunStart(int runStart) { _tRunStart = (clock_t)runStart; }

	clock_t getCycleCur() { return (clock() - _tCycleInit) / CLOCKS_PER_SEC; }
	void setCycleInit(clock_t tCycleInit) { _tCycleInit = tCycleInit; }

	int getPosX() { return _nPosX; }
	void setPosX(int posX) { _nPosX = posX; }

	int getPosY() { return _nPosY; }
	void setPosY(int posY) { _nPosY = posY; }

	int getWidth() { return _nWidth; }
	void setWidth(int width) { _nWidth = width; }

	int getHeight() { return _nHeight; }
	void setHeight(int height) { _nHeight = height; }

	char* getTimerDot() { return _timerDot; }
	char* getTimeOverDot() { return _timeOverDot; }
	char* getTimeNumDot(int timeNum) { return _timeNumDot[timeNum]; }
};
